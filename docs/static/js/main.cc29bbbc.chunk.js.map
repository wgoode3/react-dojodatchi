{"version":3,"sources":["Meals.js","Dojodatchi.js","App.js","serviceWorker.js","index.js"],"names":["Meals","n","react_default","a","createElement","className","meals","i","push","key","this","getBurgers","props","Component","randInt","max","min","Math","random","Dojodatchi","Object","classCallCheck","happiness","fullness","energy","image","message","_check","App","_this","possibleConstructorReturn","getPrototypeOf","call","activity","thing","dj","state","dojodatchi","setState","reset","e","preventDefault","href","onClick","value","src_Meals","src","alt","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc29bbbc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Meals extends Component {\n\n  getBurgers(n) {\n    if(n === 0){\n      return (\n        <span>&nbsp;</span>\n      );\n    }\n    if(n > 5){\n      return (\n        <span>\n          <span className=\"icon\">\n            <i className=\"fas fa-hamburger\"></i>\n          </span>\n          &nbsp;&times;&nbsp;{n}\n        </span>\n      );\n    }\n    let meals = [];\n    for(let i=0; i<n; i++){\n      meals.push(\n        <span key={i} className=\"icon\">\n          <i className=\"fas fa-hamburger\"></i>\n        </span>\n      );\n    }\n    return meals;\n  }\n\n  render() {\n    return (\n      <span>{this.getBurgers(this.props.n)}</span>\n    );\n  }\n\n}\n\nexport default Meals;","function randInt(max, min){\n    return ((max-min+1) * Math.random() >> 0) + min;\n}\n\nclass Dojodatchi {\n\n    constructor() {\n        this.happiness = 20;\n        this.fullness = 20;\n        this.energy = 50;\n        this.meals = 3;\n        this.image = \"start.png\";\n        this.message = \"You encounter a dojodatchi!\";\n    }\n\n    feed() {\n        if(this.meals === 0){\n            this.message = \"You are out of meals!\";\n            this.image = \"start.png\";\n        } else if(Math.random() < 0.25){\n            this.meals--;\n            this.message = \"Your dojodatchi didn't enjoy the meal!\";\n            this.image = \"badfood.png\";\n        } else {\n            this.meals--;\n            this.fullness += randInt(10, 5);\n            this.message = \"Your dojodatchi enjoyed the meal!\";\n            this.image = \"goodfood.png\";\n        }\n        return this._check();\n    }\n\n    play() {\n        this.energy -= 5;\n        if(Math.random() < 0.25) {\n            this.message = \"Your dojodatchi didn't enjoy playing!\";\n            this.image = \"badplay.png\";\n        } else {\n            this.happiness += randInt(10, 5);\n            this.message = \"Your dojodatchi enjoyed playing!\";\n            this.image = \"goodplay.png\";\n        }\n        return this._check();\n    }\n\n    work() {\n        this.energy -= 5;\n        this.meals += randInt(3, 1);\n        this.message = \"Your dojodatchi went to work!\";\n        this.image = \"work.png\";\n        return this._check();\n    }\n\n    sleep() {\n        this.energy += 15;\n        this.fullness -= 5;\n        this.happiness -= 5;\n        this.message = \"Your dojodatchi went to sleep!\";\n        this.image = \"sleep.png\";\n        return this._check();\n    }\n\n    _check(){\n        if(this.happiness > 99 && this.energy > 99 && this.fullness > 99) {\n            this.message = \"Your win! Your dojodatchi loves you forever!\";\n            this.image = \"win.png\";\n        } else if(this.fullness < 0) {\n            this.message = \"Your dojodatchi died from starvation!\";\n            this.image = \"gameover.png\";\n        } else if(this.happiness < 0) {\n            this.message = \"Your dojodatchi died from boredom!\";\n            this.image = \"gameover.png\";\n        } else if(this.energy < 0) {\n            this.message = \"Your dojodatchi died from exhaustion!\";\n            this.image = \"gameover.png\";\n        }\n        return this;\n    }\n\n}\n\nexport default Dojodatchi;","import React, { Component } from 'react';\nimport Meals from './Meals';\nimport Dojodatchi from './Dojodatchi';\nimport './dojodatchi.css';\n\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      dojodatchi : new Dojodatchi()\n    };\n  }\n\n  activity = (thing) => {\n    let dj = this.state.dojodatchi[thing]();\n    this.setState({dojodatchi: dj});\n  }\n\n  reset = (e) => {\n    e.preventDefault();\n    this.setState({dojodatchi: new Dojodatchi()});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n\n        <div className=\"card\">\n          \n          <header className=\"card-header\">\n            <p className=\"card-header-title\">\n              Dojodatchi\n            </p>\n            <a href=\"#!\" className=\"card-header-icon\" onClick={this.reset}>\n              <span className=\"icon\">\n                <i className=\"fas fa-undo\"></i>\n              </span>\n            </a>\n          </header>\n          \n          <div className=\"columns card-content\">\n            <div className=\"column\">\n              <p>\n                Fullness:\n                <progress \n                  className=\"progress is-danger\" \n                  value={this.state.dojodatchi.fullness} \n                  max=\"100\"\n                >\n                </progress>\n              </p>\n            </div>\n            <div className=\"column\">\n              <p>\n                Energy:\n                <progress \n                  className=\"progress is-link\" \n                  value={this.state.dojodatchi.energy} \n                  max=\"100\"\n                >\n                </progress>\n              </p>\n            </div>\n            <div className=\"column\">\n              <p>\n                Happiness:\n                <progress \n                  className=\"progress is-primary\" \n                  value={this.state.dojodatchi.happiness} \n                  max=\"100\"\n                >\n                </progress>\n              </p>\n            </div>\n            <div className=\"column\">\n              <p>\n                Meals:\n                <br />\n                <Meals n={this.state.dojodatchi.meals} />\n              </p>\n            </div>\n          </div>\n\n          <div className=\"image\">\n            <img \n              src={\"img/\" + this.state.dojodatchi.image} \n              alt=\"Inubashiri Momiji\" \n            />\n            <p>{this.state.dojodatchi.message}</p>\n          </div>\n\n          <div className=\"columns card-content\">  \n            <button \n              className=\"column button is-medium is-danger\"\n              onClick={this.activity.bind(this, \"feed\")}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-hamburger\"></i>\n              </span>\n            </button>\n            <button \n              className=\"column button is-medium is-link\"\n              onClick={this.activity.bind(this, \"sleep\")}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-bed\"></i>\n              </span>\n            </button>\n            <button \n              className=\"column button is-medium is-primary\"\n              onClick={this.activity.bind(this, \"play\")}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-dice\"></i>\n              </span>\n            </button>\n            <button \n              className=\"column button is-medium is-warning\"\n              onClick={this.activity.bind(this, \"work\")}\n            >\n              <span className=\"icon\">\n                <i className=\"fas fa-briefcase\"></i>\n              </span>\n            </button>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}